import dotenv from "dotenv";
dotenv.config();
import { Bot, GrammyError, HttpError, Keyboard} from "grammy";

const BOT_KEY = process.env.BOT_API_KEY;
const bot = new Bot(BOT_KEY);

// –ö–æ–º–∞–Ω–¥–∞, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–µ—Ä–≤—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
// –í—Ç–æ—Ä—ã–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –¥–µ–π—Å—Ç–≤–∏–µ–º
// –°–ª—É—à–∞–µ–º –≤–≤–æ–¥


bot.api.setMyCommands([
  {
    command: "start",
    description: "–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞",
  },
  {
    command: "mood",
    description: "–ü–æ–º–æ–≥–∏—Ç–µ",
  },
  {
    command: "birthday",
    description: "–£–∑–Ω–∞—Ç—å –¥—Ä",
  },
  {
    command: "location",
    description: "–£–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å",
  },
]);

// command = –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã [–∏–ª–∏ –º–∞—Å—Å–∏–≤ –∫–æ–º–∞–Ω–¥] –≤–∏–¥–∞ 'start' (–∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
bot.command("start", async (ctx) => {
  await ctx.reply(`–ü—Ä–∏–≤–µ—Ç ${ctx.from.first_name}`);
});

//? –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É 
//? ontime() - —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (—Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å —á–µ—Ä–µ–∑ –∫–æ–ª–±–µ–∫)
//?  reply_markup: {remove_keyboard: true} - —Å–æ–≤—Å–µ–º —É–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤—É
//? resized() - –ø–æ–¥–≥–æ–Ω—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
bot.command('mood', async (ctx) => {
  const moodKeyboard = new Keyboard().text('–•–æ—Ä–æ—à–æ').row().text('–ù–æ—Ä–º').text('–ü–ª–æ—Ö–æ').resized()

  // ? —Ç–æ–∂–µ —Å–∞–º–æ–µ, —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π 
  // const moodLabels = ['–•–æ—Ä', '–û—Ç–ª', '–ü–ª–æ'];
  // const rows = moodLabels.map((label) => {
  //   return [
  //     Keyboard.text(label)
  //   ]
  // })
  // const moodKeyboard2 = Keyboard.from(rows).resized()

  await ctx.reply('–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?', {
    reply_markup: moodKeyboard
  })
})

bot.hears('–•–æ—Ä–æ—à–æ', async (ctx) => {
  const key2 = new Keyboard().text('—Ç–æ—á–Ω–æ?').text('–ü–∏–∑–∂–∂—é').resized()
  await ctx.reply('–¢–æ—á–Ω–æ –≤—Å—ë —Ö–æ—Ä–æ—à–æ?',{
    reply_markup: key2
  })
})


// bot.hears('–•–æ—Ä–æ—à–æ', async (ctx) => {
//   await ctx.reply('–û—Ç–ª–∏—á–Ω–æ', {
//     reply_markup: {remove_keyboard: true}
//   })
// })

// ? –ú–æ–∂–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏ –∏–Ω—Ñ—É
// bot.on('msg', async (ctx) => {
//   console.log(ctx.me)
// })

// bot.command("location", async (ctx) => {
//   await ctx.reply(`–í–æ—Ç —Ç–µ–±–µ –∞–¥—Ä–µ—Å —á–µ–ª–æ–≤–µ–∫–∞: ${Person.dub.location.address}`);
// });


// //? –∫–∞—Å—Ç–æ–º–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
// bot.on('msg').filter((ctx) => {
//   return ctx.from.id === 280181578;
// }, async (ctx) => {
//   await ctx.reply(`–ü—Ä–∏–≤–µ—Ç: ${ctx.from.id}`)
// })

//? —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–æ–∫–µ
// bot.on("message", async (ctx) => {
//   await ctx.reply(`–°–æ–æ–±—â–µ–Ω–∏–µ: `);
// });


//? —Å–ª—É—à–∞—Ç–µ–ª—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π [–∏–ª–∏ –º–∞—Å—Å–∏–≤–∞], –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–µ—Ä–≤—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º expReg 
bot.hears('–∂–æ–ø–∞', async (ctx) => {
  await ctx.reply(`–°–∞–º —Ç—ã –∂–æ–ø–∞`)
})

//? –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å "–æ—Ç–≤–µ—Ç" –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ reply
//? –ß–µ—Ä–µ–∑ parse_mode –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Ç–∏–ª–∏ 
//? —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
bot.hears('–ø–∏–¥–æ—Ä', async (ctx) => {
  await ctx.react('üåö');
  await ctx.reply(`—Å–∞–º —Ç—ã <b>${ctx.msg.text}</b>`, {
    reply_parameters: { message_id: ctx.msg.message_id},
    parse_mode: 'HTML'
  })

})

// –ø—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–≤ —á–µ—Ä–µ–∑ expReg
bot.hears(/—Ö—É–π/, async (ctx) => {
  await ctx.reply(`—Å–∞–º —Ç—ã ${ctx.msg.text}`)
})





















// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = err.error;

  if (e instanceof GrammyError) {
    console.error("Error in request:", e.description);
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram:", e);
  } else {
    console.error("Unknown error:", e);
  }
});

bot.start();
