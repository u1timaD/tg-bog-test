import dotenv from "dotenv";
dotenv.config();
import { Bot, GrammyError, HttpError, Keyboard } from "grammy";

const BOT_KEY = process.env.BOT_API_KEY;
const JSON_URL = process.env.JSON_URL;
const MASTER_KEY = process.env.MASTER_KEY;
const bot = new Bot(BOT_KEY);

// –ö–æ–º–∞–Ω–¥–∞, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–µ—Ä–≤—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
// –í—Ç–æ—Ä—ã–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –¥–µ–π—Å—Ç–≤–∏–µ–º
// –°–ª—É—à–∞–µ–º –≤–≤–æ–¥

//? –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
// const getData = () => {
//   fetch(JSON_URL, {
//     method: "GET",
//     headers: {
//       "X-Master-Key": MASTER_KEY,
//     },
//   })
//     .then((response) => {
//       if (!response.ok) {
//         throw new Error("Network response was not ok");
//       }
//       return response.json();
//     })
//     .then((data) => {
//       // console.log(data.record);
//       startBot(data.record);
//     })
//     .catch((error) => {
//       console.error("There was a problem with the fetch operation:", error);
//     });
// };
// getData();

// const startBot = (data) => {
//   const Friends = data;

// ?–¢—É—Ç –≤—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ


let searchParam = "–ê–¥—Ä–µ—Åüìç";
const SecondName = Friends.map((item) => item.family);

// bot.api.setMyCommands([
//   {
//     command: "start",
//     description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞",
//   },
//   {
//     command: "info",
//     description: "–ß—Ç–æ –º–æ–∂–µ—Ç –±–æ—Ç",
//   },
// ]);

bot.command("start", async (ctx) => {
  const firstKey = new Keyboard().text("–ê–¥—Ä–µ—Åüìç").text("–¥—ÄüéÇ").resized();

  await ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç <b>${ctx.from.username}</b>.
–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?`,
    {
      reply_markup: firstKey,
      parse_mode: "HTML",
    }
  );
});

bot.command("info", async (ctx) => {
  const firstKey = new Keyboard().text("–ê–¥—Ä–µ—Åüìç").text("–¥—ÄüéÇ").resized();

  await ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç *${ctx.from.username}*
  –≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –Ω–µ —Ç–∞–∫ –º–Ω–æ–≥–æ, –ª–∏—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –æ —Ç–æ–º –≥–¥–µ –∂–∏–≤—É—Ç —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è, –ª–∏–±–æ –æ —Ç–æ–º, –∫–æ–≥–¥–∞ —É –Ω–∏—Ö –¥—Ä
  
  –°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –¥—Ä—É–≥`,
    {
      reply_markup: firstKey,
      parse_mode: "MarkdownV2",
    }
  );
});
 
bot.hears("–ê–¥—Ä–µ—Åüìç", async (ctx) => {
  const addressKey = new Keyboard().resized().row();
  searchParam = "–ê–¥—Ä–µ—Åüìç";

  Friends.forEach((friend) => {
    addressKey.text(friend.family);
  });

  // const word = ctx.msg.text.replace(/[^–∞-—è–ê-–Øa-zA-Z]/g, '').toLowerCase();

  await ctx.reply("–ß–µ–π –∞–¥—Ä–µ—Å —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", {
    reply_markup: addressKey,
  });
});

bot.hears("–¥—ÄüéÇ", async (ctx) => {
  const addressKey = new Keyboard().resized().row();
  searchParam = "–¥—ÄüéÇ";

  Friends.forEach((friend) => {
    addressKey.text(friend.family);
  });

  await ctx.reply(`–ß–µ–π –¥—Ä —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?`, {
    reply_markup: addressKey,
  });
});




//? –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
const formateDate = (dateString) => {
  const dateParts = dateString.split(".");
  return new Date(dateParts[2], dateParts[1] - 1, dateParts[0]);
};

//? –°–∫–ª–æ–Ω—è–µ–º —Å–ª–æ–≤–æ "–î–ï–ù–¨"
const formateDayName = (number) => {
  const lastDigit = number % 10;
  const lastTwoDigits = number % 100;

  if (lastTwoDigits >= 11 && lastTwoDigits <= 14) {
      return `${number} –¥–Ω–µ–π`;
  } else if (lastDigit === 1) {
      return `${number} –¥–µ–Ω—å`;
  } else if (lastDigit >= 2 && lastDigit <= 4) {
      return `${number} –¥–Ω—è`;
  } else {
      return `${number} –¥–Ω–µ–π`;
  }
}

//? –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –¥—Ä
const lastDays = (dateString) => {
  const today = new Date();
  const targetDate = formateDate(dateString);
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–∞—Ç—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –º–µ—Å—è—Ü–µ–º –∏ –¥–Ω–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
  const targetDateThisYear = new Date(
    today.getFullYear(),
    targetDate.getMonth(),
    targetDate.getDate()
  );

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
  const differenceInTime = targetDateThisYear.getTime() - today.getTime();
  const differenceInDays = Math.ceil(differenceInTime / (1000 * 60 * 60 * 24));

  return formateDayName(differenceInDays < 0 ? 365 + differenceInDays : differenceInDays);
};

//? –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç {13 –∞–ø—Ä–µ–ª—è}
const formateDay = (dateString) => {
  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç Date
  const date = formateDate(dateString);
  const options = { day: "numeric", month: "long" };
  return date.toLocaleDateString("ru-RU", options);
};



//? –ü–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏/–¥—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–µ–ª–æ–≤–µ–∫–∞
const getPersonInfo = (indexPerson) => {
  if (searchParam === "–ê–¥—Ä–µ—Åüìç") {
    const { address, floor, room, code, entry } = Friends.filter(
      (item) => item.family === `${indexPerson}`
    )[0].location;
    return `*–ê–¥—Ä–µ—Å:* ${address}  
*–ø–æ–¥—ä–µ–∑–¥*: ${entry}  
*—ç—Ç–∞–∂:* ${floor}  
*–∫–≤–∞—Ä—Ç–∏—Ä–∞:* ${room}  
*–¥–æ–º–æ—Ñ–æ–Ω:* ${code}`;
  }
  if (searchParam === "–¥—ÄüéÇ") {
    const getBirthdayDates = Friends.filter(
      (item) => item.family === `${indexPerson}`
    )[0].birthday;
    const result = getBirthdayDates.map(({ name, date, wishlist }) => {
      return `*–ò–º—è:* ${name}\n*–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è*: ${formateDay(date)}\n*–î–æ –¥—Ä –æ—Å—Ç–∞–ª–æ—Å—å:* ${lastDays(date)}\n*–í–∏—à–ª–∏—Å—Ç:* ${wishlist ?? "–ü–æ–∫–∞ –Ω–µ—Ç—É"}`;
    });

    return result.join("\n\n");
  }
};

bot.hears(SecondName, async (ctx) => {
  const personBtn = new Keyboard().text("–ö –Ω–∞—á–∞–ª—ÉüîÑ").resized();
  await ctx.reply(getPersonInfo(ctx.match), {
    reply_markup: personBtn,
    parse_mode: "MarkdownV2",
  });
});

bot.hears("–ö –Ω–∞—á–∞–ª—ÉüîÑ", async (ctx) => {
  const firstKey = new Keyboard().text("–ê–¥—Ä–µ—Åüìç").text("–¥—ÄüéÇ").resized();

  await ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç <b>${ctx.from.username}</b>.
  –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?`,
    {
      reply_markup: firstKey,
      parse_mode: "HTML",
    }
  );
});

bot.on("message", async (ctx) => {
  await ctx.reply("–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥");
});













// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = err.error;

  if (e instanceof GrammyError) {
    console.error("Error in request:", e.description);
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram:", e);
  } else {
    console.error("Unknown error:", e);
  }
});

bot.start();
// };
